% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_loops.R
\name{import_loops}
\alias{import_loops}
\title{Import called loops in .bedpe format to use in HicAggR}
\usage{
import_loops(
  file_bedpe = NULL,
  genomicConstraint = NULL,
  discard_trans = FALSE,
  chromSizes = NULL,
  binSize = NULL,
  minDist = NULL,
  maxDist = NULL,
  verbose = FALSE,
  cores = 1
)
}
\arguments{
\item{file_bedpe}{bedpe file path (Default NULL)}

\item{genomicConstraint}{\if{html}{\out{<GRanges>}}: GRanges object of constraint regions.
If NULL chromosomes in chromSizes are used as constraints (Default NULL)}

\item{discard_trans}{\if{html}{\out{<logical>}}: If TRUE discard loops where anchor and bait
are in different genomic constraint elements, either different TADs or
chromosomes, if \code{genomicConstraint = NULL}. (Default FALSE)}

\item{chromSizes}{<data.frame>: A data.frame containing chromosomes names
and lengths in base pairs (see example). (Default NULL)}

\item{binSize}{\if{html}{\out{<integer>}}: Bin size in bp - corresponds to matrix resolution.}

\item{minDist}{\if{html}{\out{<numeric>}}: Minimal distance between anchors and baits.
(Default NULL)}

\item{maxDist}{\if{html}{\out{<numeric>}}: Maximal distance between anchors and baits.
(Default NULL)}

\item{verbose}{\if{html}{\out{<logical>}}: If TRUE show the progression in console.
(Default FALSE)}

\item{cores}{\if{html}{\out{<integer>}}: Number of cores to use. (Default 1)}
}
\value{
A GInteractions object.
}
\description{
Imports bedpe file formats as GInteractions object usable
to perform submatrix extraction with \code{ExtractSubmatrix()}
}
\details{
import_loops
}
\examples{
\donttest{
temp.dir <- file.path(tempdir(), "HIC_DATA")
dir.create(temp.dir)
Hic.url <- paste0(
    "https://4dn-open-data-public.s3.amazonaws.com/",
    "fourfront-webprod/wfoutput/7386f953-8da9-47b0-acb2-931cba810544/",
    "4DNFIOTPSS3L.hic"
)
HicOutput.pth <- file.path(temp.dir, "Control_HIC.hic")
download.file(Hic.url, HicOutput.pth, method = "auto", extra = "-k")
hicLst <- ImportHiC(
    file = HicOutput.pth,
    hicResolution = 5000,
    chromSizes = data.frame(
        c("2L", "2R", "3L", "3R", "4", "X", "Y"),
        c(23513712, 25286936, 28110227, 32079331, 1348131, 23542271, 3667352)
    ),
    chrom_1 = c("2L", "2R", "3L", "3R", "4", "X", "Y")
)
hicLst <- BalanceHiC(hicLst)
hicLst <- OverExpectedHiC(hicLst)
}

bedpe_path <- system.file("extdata",
    "postprocessed_pixels_5000.bedpe",
    package = "HicAggR", mustWork = TRUE
)
loops <- import_loops(
    file_bedpe = bedpe_path,
    chromSizes = data.frame(
        c("2L", "2R", "3L", "3R", "4", "X", "Y"),
        c(23513712, 25286936, 28110227, 32079331, 1348131, 23542271, 3667352)
    ),
    binSize = 5000, minDist = 105000
)
\donttest{
Beaf.mtx_lst <- ExtractSubmatrix(
    genomicFeature = loops,
    hicLst = hicLst
)
Beaf.mtx_lst <- PrepareMtxList(
    matrices = Beaf.mtx_lst
)
aggreg.mtx <- Aggregation(Beaf.mtx_lst)
ggAPA(
    aggregatedMtx = aggreg.mtx,
    title = "APA on called loops (distance > 100.5KB)"
)
}

}
